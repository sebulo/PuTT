# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

*.zip

# Installer logs
pip-log.yaml
pip-delete-this-directory.yaml

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/


training_with_prolongation/saved_images
training_with_prolongation/saved_data
training_with_prolongation/__pycache__
training_with_prolongation/model/__pycache__
training_with_prolongation/large_exp/
training_with_prolongation/large_exp_V2/
training_with_prolongation/large_exp_V3/
training_with_prolongation/birds_gray_weighted_sampling/
training_with_prolongation/gray_birds_weighted_upsampling_large/

training_with_prolongation/benchmarks*


training_with_prolongation/large_exp_V10/

#shell scripts for server
#*.sh
# everything starting with slurm- is a slurm output file
slurm-*
*.out
benchmark_*
benchmarks_bird_time/
color_images_birds/
# everything with .csv is a csv file
*.csv

log/

../.DS_Store
/.DS_Store
DS_Store
tt/.DS_store

training_with_prolongation/gray_birds_weighted_upsampling_large_converge
training_with_prolongation/weighted_upsampling_converge_steps_10_20_40
training_with_prolongation/weighted_upsampling_converge_steps_later_start

training_with_prolongation/wandb
PuTT/wandb
training_with_prolongation/wandb_local

training_with_prolongation/ranks_scaling

tt/.DS_store
tt/nerf_synthetic*
tt/three_views


tensor_train_prolongation/__pycache__
tensor_train_prolongation/.DS_Store

tensor_train_prolongation/saved_images/
tensor_train_prolongation/wandb/
tensor_train_prolongation/wandb_local/
output_files/

tensor_train_prolongation/3d_data/
tensor_train_prolongation/images/

htmls/

Synthetic_NSVF/
nerf_synthetic/
TanksAndTemples/

test_notebooks/isotropic256fine.npy
test_notebooks/isotropic1024fine.npy
test_notebooks/tokyo_8192x8192_center.npy
test_notebooks/tokyo_16384x16384_center.npy

tensor_train_prolongation/isotropic1024fine_new.npy
isotropic1024fine_new.npy
tensor_train_prolongation/downsampled_volumes


test_notebooks/21_Gigapixel_Total_Renovation_of_Girl_with_a_Pearl_Earring-Digital_Profoundism-Demo.jpg
test_notebooks/2048x2048.jpg
test_notebooks/girl_16384x16384.npy

test_notebooks/.DS_Store
tensor_train_prolongation/configs/.DS_Store

test_notebooks/Rie
test_notebooks/GD
test_notebooks/t3f

test_notebooks/girl_4k.png
test_notebooks/incomplete_data
test_notebooks/tokyo_compression
test_notebooks/tokyo_noise
test_notebooks/noise_vs_upsampling_girl

test_notebooks/3d_results
# end with .npy
*.npy

# everything in test_notebooks ending with .png or .jpg or .npy
test_notebooks/*.png
test_notebooks/*.jpg
test_notebooks/*.npy
# all folders in test_notebooks
test_notebooks/*/

data/


.DS_Store


alphas_dir/

PuTT-Nerf/alphas_dir